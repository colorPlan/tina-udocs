# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  authors(relativePath: String): Authors!
  authorsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorsFilter): AuthorsConnection!
  redirects(relativePath: String): Redirects!
  redirectsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: RedirectsFilter): RedirectsConnection!
  code_versions(relativePath: String): Code_versions!
  code_versionsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Code_versionsFilter): Code_versionsConnection!
  permalinks(relativePath: String): Permalinks!
  permalinksConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PermalinksFilter): PermalinksConnection!
  table_of_contents(relativePath: String): Table_of_contents!
  table_of_contentsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Table_of_contentsFilter): Table_of_contentsConnection!
  site_settings(relativePath: String): Site_settings!
  site_settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Site_settingsFilter): Site_settingsConnection!
  doc_pages(relativePath: String): Doc_pages!
  doc_pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Doc_pagesFilter): Doc_pagesConnection!
}

input DocumentFilter {
  authors: AuthorsFilter
  redirects: RedirectsFilter
  code_versions: Code_versionsFilter
  permalinks: PermalinksFilter
  table_of_contents: Table_of_contentsFilter
  site_settings: Site_settingsFilter
  doc_pages: Doc_pagesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Authors | Redirects | Code_versions | Permalinks | Table_of_contents | Site_settings | Doc_pages

type Authors implements Node & Document {
  full_name: String!
  github: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input AuthorsFilter {
  full_name: StringFilter
  github: StringFilter
}

type AuthorsConnectionEdges {
  cursor: String!
  node: Authors
}

type AuthorsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorsConnectionEdges]
}

union RedirectsSource = Permalinks

union RedirectsDestination = Permalinks

type Redirects implements Node & Document {
  source: RedirectsSource!
  destination: RedirectsDestination!
  permanent: Boolean!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RedirectsSourceFilter {
  permalinks: PermalinksFilter
}

input RedirectsDestinationFilter {
  permalinks: PermalinksFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RedirectsFilter {
  source: RedirectsSourceFilter
  destination: RedirectsDestinationFilter
  permanent: BooleanFilter
}

type RedirectsConnectionEdges {
  cursor: String!
  node: Redirects
}

type RedirectsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [RedirectsConnectionEdges]
}

type Code_versions implements Node & Document {
  version_number: String!
  release_date: String!
  published: Boolean!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input Code_versionsFilter {
  version_number: StringFilter
  release_date: DatetimeFilter
  published: BooleanFilter
}

type Code_versionsConnectionEdges {
  cursor: String!
  node: Code_versions
}

type Code_versionsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Code_versionsConnectionEdges]
}

union PermalinksPagesPage = Doc_pages

type PermalinksPages {
  page: PermalinksPagesPage!
  language: String!
}

type Permalinks implements Node & Document {
  canonical_url: String!
  pages: [PermalinksPages]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PermalinksPagesPageFilter {
  doc_pages: Doc_pagesFilter
}

input PermalinksPagesFilter {
  page: PermalinksPagesPageFilter
  language: StringFilter
}

input PermalinksFilter {
  canonical_url: StringFilter
  pages: PermalinksPagesFilter
}

type PermalinksConnectionEdges {
  cursor: String!
  node: Permalinks
}

type PermalinksConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PermalinksConnectionEdges]
}

union Table_of_contentsCode_version = Code_versions

union Table_of_contentsSectionsPermalink = Permalinks

union Table_of_contentsSectionsSub_sectionsPermalink = Permalinks

union Table_of_contentsSectionsSub_sectionsSub_sectionsPermalink = Permalinks

type Table_of_contentsSectionsSub_sectionsSub_sections {
  Label: String!
  permalink: Table_of_contentsSectionsSub_sectionsSub_sectionsPermalink!
}

type Table_of_contentsSectionsSub_sections {
  Label: String!
  permalink: Table_of_contentsSectionsSub_sectionsPermalink!
  sub_sections: [Table_of_contentsSectionsSub_sectionsSub_sections]
}

type Table_of_contentsSections {
  Label: String!
  permalink: Table_of_contentsSectionsPermalink!
  sub_sections: [Table_of_contentsSectionsSub_sections]
}

type Table_of_contents implements Node & Document {
  language: String!
  code_version: Table_of_contentsCode_version
  sections: [Table_of_contentsSections]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Table_of_contentsCode_versionFilter {
  code_versions: Code_versionsFilter
}

input Table_of_contentsSectionsPermalinkFilter {
  permalinks: PermalinksFilter
}

input Table_of_contentsSectionsSub_sectionsPermalinkFilter {
  permalinks: PermalinksFilter
}

input Table_of_contentsSectionsSub_sectionsSub_sectionsPermalinkFilter {
  permalinks: PermalinksFilter
}

input Table_of_contentsSectionsSub_sectionsSub_sectionsFilter {
  Label: StringFilter
  permalink: Table_of_contentsSectionsSub_sectionsSub_sectionsPermalinkFilter
}

input Table_of_contentsSectionsSub_sectionsFilter {
  Label: StringFilter
  permalink: Table_of_contentsSectionsSub_sectionsPermalinkFilter
  sub_sections: Table_of_contentsSectionsSub_sectionsSub_sectionsFilter
}

input Table_of_contentsSectionsFilter {
  Label: StringFilter
  permalink: Table_of_contentsSectionsPermalinkFilter
  sub_sections: Table_of_contentsSectionsSub_sectionsFilter
}

input Table_of_contentsFilter {
  language: StringFilter
  code_version: Table_of_contentsCode_versionFilter
  sections: Table_of_contentsSectionsFilter
}

type Table_of_contentsConnectionEdges {
  cursor: String!
  node: Table_of_contents
}

type Table_of_contentsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Table_of_contentsConnectionEdges]
}

type Site_settingsMeta_links {
  link: String!
  label: String!
}

type Site_settings implements Node & Document {
  language: String!
  sku_product_name: String!
  site_title: String!
  project_code_repository: String!
  meta_links: [Site_settingsMeta_links]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Site_settingsMeta_linksFilter {
  link: StringFilter
  label: StringFilter
}

input Site_settingsFilter {
  language: StringFilter
  sku_product_name: StringFilter
  site_title: StringFilter
  project_code_repository: StringFilter
  meta_links: Site_settingsMeta_linksFilter
}

type Site_settingsConnectionEdges {
  cursor: String!
  node: Site_settings
}

type Site_settingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Site_settingsConnectionEdges]
}

union Doc_pagesAuthor = Authors

union Doc_pagesCode_version = Code_versions

type Doc_pages implements Node & Document {
  title: String!
  description: String
  author: Doc_pagesAuthor
  type: String!
  code_version: Doc_pagesCode_version
  draft: Boolean!
  body: JSON!
  last_updated: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Doc_pagesAuthorFilter {
  authors: AuthorsFilter
}

input Doc_pagesCode_versionFilter {
  code_versions: Code_versionsFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input Doc_pagesFilter {
  title: StringFilter
  description: StringFilter
  author: Doc_pagesAuthorFilter
  type: StringFilter
  code_version: Doc_pagesCode_versionFilter
  draft: BooleanFilter
  body: RichTextFilter
  last_updated: DatetimeFilter
}

type Doc_pagesConnectionEdges {
  cursor: String!
  node: Doc_pages
}

type Doc_pagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Doc_pagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  createAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  updateRedirects(relativePath: String!, params: RedirectsMutation!): Redirects!
  createRedirects(relativePath: String!, params: RedirectsMutation!): Redirects!
  updateCode_versions(relativePath: String!, params: Code_versionsMutation!): Code_versions!
  createCode_versions(relativePath: String!, params: Code_versionsMutation!): Code_versions!
  updatePermalinks(relativePath: String!, params: PermalinksMutation!): Permalinks!
  createPermalinks(relativePath: String!, params: PermalinksMutation!): Permalinks!
  updateTable_of_contents(relativePath: String!, params: Table_of_contentsMutation!): Table_of_contents!
  createTable_of_contents(relativePath: String!, params: Table_of_contentsMutation!): Table_of_contents!
  updateSite_settings(relativePath: String!, params: Site_settingsMutation!): Site_settings!
  createSite_settings(relativePath: String!, params: Site_settingsMutation!): Site_settings!
  updateDoc_pages(relativePath: String!, params: Doc_pagesMutation!): Doc_pages!
  createDoc_pages(relativePath: String!, params: Doc_pagesMutation!): Doc_pages!
}

input DocumentUpdateMutation {
  authors: AuthorsMutation
  redirects: RedirectsMutation
  code_versions: Code_versionsMutation
  permalinks: PermalinksMutation
  table_of_contents: Table_of_contentsMutation
  site_settings: Site_settingsMutation
  doc_pages: Doc_pagesMutation
  relativePath: String
}

input DocumentMutation {
  authors: AuthorsMutation
  redirects: RedirectsMutation
  code_versions: Code_versionsMutation
  permalinks: PermalinksMutation
  table_of_contents: Table_of_contentsMutation
  site_settings: Site_settingsMutation
  doc_pages: Doc_pagesMutation
}

input AuthorsMutation {
  full_name: String
  github: String
}

input RedirectsMutation {
  source: String
  destination: String
  permanent: Boolean
}

input Code_versionsMutation {
  version_number: String
  release_date: String
  published: Boolean
}

input PermalinksPagesMutation {
  page: String
  language: String
}

input PermalinksMutation {
  canonical_url: String
  pages: [PermalinksPagesMutation]
}

input Table_of_contentsSectionsSub_sectionsSub_sectionsMutation {
  Label: String
  permalink: String
}

input Table_of_contentsSectionsSub_sectionsMutation {
  Label: String
  permalink: String
  sub_sections: [Table_of_contentsSectionsSub_sectionsSub_sectionsMutation]
}

input Table_of_contentsSectionsMutation {
  Label: String
  permalink: String
  sub_sections: [Table_of_contentsSectionsSub_sectionsMutation]
}

input Table_of_contentsMutation {
  language: String
  code_version: String
  sections: [Table_of_contentsSectionsMutation]
}

input Site_settingsMeta_linksMutation {
  link: String
  label: String
}

input Site_settingsMutation {
  language: String
  sku_product_name: String
  site_title: String
  project_code_repository: String
  meta_links: [Site_settingsMeta_linksMutation]
}

input Doc_pagesMutation {
  title: String
  description: String
  author: String
  type: String
  code_version: String
  draft: Boolean
  body: JSON
  last_updated: String
}

schema {
  query: Query
  mutation: Mutation
}
